[{"categories":null,"contents":"Addressed pretty significant page load performance issue founde in larger deployments. Eliminates uses of intensive backend query, replacing it with an asynchronous API call against a lucene index. This change reduces page load from from 2+ minutes to nearly instant, with an incredibly responsive UI.\n","permalink":"https://www.easyolap.cn/projects/contributions/deploy-triggers/","tags":["Java","jQuery","REST APIs","Bamboo","JSON"],"title":"Atlassian Deployment Triggers"},{"categories":null,"contents":"OpenShift Origin 3.9.0手动单机安装\n1.配置主机 修改主机名为openshift.demo.com hostnamectl set-hostname openshift.demo.com\n开启SELINUX 修改/etc/selinux/config SELINUX=enforcing SELINUXTYPE=targeted 激活网络 \\# nmcli con show  docker0 1a211fa6-1001-4fa9-b5c8-e3b2dcf73e5a bridge docker0 ens192 f16e6b7a-e593-4722-9ae4-1bdfa1fa4b4a ethernet ens192\n# nmcli con up ens192 # nmcli con mod ens192 connection.autoconnect yes # systemctl restart NetworkManager\n2.安装docker 安装依赖 yum install -y wget git net-tools bind-utils iptables-services bridge-utils bash-completion 安装docker yum install -y docker 配置Docker镜像服务器\n中国科技大学的镜像服务器进行加速。修改/etc/sysconfig/docker文件，在OPTIONS变量中追加\u0026ndash;registry-mirror=https://docker.mirrors.ustc.edu.cn \u0026ndash;insecure-registry=172.30.0.0/16。\n3.下载openshift-origin-server-v3.9.0-191fece-linux-64bit.tar.gz\n4.解压openshift-origin-server-v3.9.0-191fece-linux-64bit.tar.gz到 /opt/openshift\n5.添加到PATH\n6.测试docker是否能正常下载镜像 docker pull busybox\n7.执行启动命令,开始下载指定版本v3.9.0所需的镜像文件 oc cluster up \u0026ndash;version=v3.9.0 \u0026ndash;public-hostname=openshift.demo.com\n 会有类似以下信息： Pulling image openshift/origin:v3.9.0 Pulled 1/4 layers, 26% complete  。。。\nPulled 4\u0026frasl;4 layers, 100% complete\n表示下载完成了并启动服务\n8.启动完成后访问系统 https://openshift.demo.com:8443\n9.\n","permalink":"https://www.easyolap.cn/publications/openshift-001/","tags":["DevOps","Continuous Integration","Continuous Delivery","CI/CD pipelines","docker","agile","Culture"],"title":"OpenShift Origin  3.9.0手动单机安装"},{"categories":null,"contents":" Docker运行mysql镜像 启动mysql镜像\n[root@CentOS ~]# docker run -d -e MYSQL_ROOT_PASSWORD=admin \u0026ndash;name mysql -v /data/mysql/etc:/etc/mysql/conf.d -v /data/mysql/data:/var/lib/mysql -v /etc/localtime:/etc/localtime:ro mysql\n说明：\n1.把数据文件存贮在宿主机中的/data/mysql/data目录下，所以挂载/data/mysql/data到/var/lib/mysql\n2.采用宿主机中的配置启动mysql服务，所以挂载 /data/mysql/etc到/etc/mysql/conf.d 配置文件见下文的my.cnf文件\n3.使容器与宿主机时间同步，挂载/etc/localtime到/etc/localtime:ro 只读的方式。\nmy.cnf\n[mysqld]\nuser = mysql\ndefault-storage-engine = InnoDB\nsocket = /var/lib/mysql/mysql.sock\npid-file = /var/lib/mysql/mysql.pid\nskip-external-locking\nskip-name-resolve\n\\# MyISAM \\#\nkey-buffer-size = 32M\n# SAFETY #\nmax-allowed-packet = 16M\nmax-connect-errors = 1000000\n# DATA STORAGE #\ndatadir = /var/lib/mysql\n# CACHES AND LIMITS #\ntmp-table-size = 32M\nmax-heap-table-size = 32M\nquery-cache-type = 0\nquery-cache-size = 0\nmax-connections = 500\nthread-cache-size = 50\nopen-files-limit = 65535\ntable-definition-cache = 4096\ntable-open-cache = 4096\n# INNODB #\ninnodb-flush-method = O_DIRECT\ninnodb-log-files-in-group = 2\ninnodb-log-file-size = 64M\ninnodb-flush-log-at-trx-commit = 1\ninnodb-file-per-table = 1\ninnodb-buffer-pool-size = 592M\n# LOGGING #\nlog-error = /var/lib/mysql/mysql-error.log\nlog-queries-not-using-indexes = 1\nslow-query-log = 1\nslow-query-log-file = /var/lib/mysql/mysql-slow.log\n","permalink":"https://www.easyolap.cn/publications/mysql-by-docker/","tags":["mysql","docker","agile"],"title":"Mysql源码安装！"},{"categories":null,"contents":" 本文转载自：DevOps小站 官方网站，原文地址：https://www.easyolap.cn/publications/mysql-by-docker/\n 一、编译安装MySQL前准备工作\n安装编译源码所需的工具和库\nyum -y install gcc gcc-c++ ncurses-devel perl openssl-devel bison\n安装cmake（记得好像从mysql 5.5开始需要cmake编译安装），可从https://cmake.org/download/ 中下载。\ntar zxvf cmake-3.6.1.tar.gz\ncd cmake-3.6.1\n./bootstrap\nmake \u0026amp;\u0026amp; make install\n二、创建用户及MySQL所需目录\n新增mysql用户\ngroupadd -r mysql\nuseradd -r -g mysql mysql\n新建MySQL所需目录\nmkdir -p /data/mysql/server\nmkdir -p /data/mysql/data\nmkdir -p /data/mysql/etc\n三、编译安装MySQL\n可从http://dev.mysql.com/downloads/mysql/ 下载mysql源码(MySQL Community Server 5.6.32 )。\ntar zxvf mysql-5.6.32.tar.gz\ncd mysql-5.6.32\n\u0026ldquo;cmake -DCMAKE_INSTALL_PREFIX=/data/mysql/server\n-DDEFAULT_CHARSET=utf8\\ -DDEFAULT_COLLATION=utf8_general_ci\\ -DWITH_INNOBASE_STORAGE_ENGINE=1\\ -DWITH_ARCHIVE_STORAGE_ENGINE=1\\ -DWITH_BLACKHOLE_STORAGE_ENGINE=1\\ -DMYSQL_DATADIR=/data/mysql/data\\ -DMYSQL_TCP_PORT=3306\\ -DENABLE_DOWNLOADS=1\\ -DSYSCONFDIR=/data/mysql/etc\\ -DWITH_SSL=system\\ -DWITH_ZLIB=system\\ -DWITH_LIBWRAP=0 \u0026ldquo;\nmake \u0026amp;\u0026amp; make install\nDCMAKE_INSTALL_PREFIX=dir_name 设置mysql安装目录\n修改mysql目录权限\ncd /data/mysql/server\nchown -R mysql:mysql ./\ncd /data/mysql/data\nchown -R mysql:mysql ./\n初始化mysql数据库\ncd /data/mysql/server/\n./scripts/mysql_install_db \u0026ndash;user=mysql \u0026ndash;datadir=/data/mysql/data\n编辑MySQL配置文件\nmv /etc/my.cnf /data/mysql/etc/my.cnf\nchown -R mysql:mysql /data/mysql/etc/my.cnf\n编辑my.cnf，my.cnf可在percona官网中及按照自己的情况生成。网址如下：https://tools.percona.com/wizard 。\n[mysql]\n# CLIENT #\nport = 3306\nsocket = /data/mysql/data/mysql.sock\n[mysqld]\n# GENERAL #\nuser = mysql\ndefault-storage-engine = InnoDB\nsocket = /data/mysql/data/mysql.sock\npid-file = /data/mysql/data/mysql.pid\nskip-external-locking\nskip-name-resolve\n# MyISAM #\nkey-buffer-size = 32M\nmyisam-recover = FORCE,BACKUP\n# SAFETY #\nmax-allowed-packet = 16M\nmax-connect-errors = 1000000\n# DATA STORAGE #\ndatadir = /data/mysql/data\n# BINARY LOGGING #\nlog-bin = /data/mysql/data/mysql-bin\nexpire-logs-days = 14\nsync-binlog = 1\n# REPLICATION #\nskip-slave-start = 1\nrelay-log = /data/mysql/data/relay-bin\nslave-net-timeout = 60\n# CACHES AND LIMITS #\ntmp-table-size = 32M\nmax-heap-table-size = 32M\nquery-cache-type = 0\nquery-cache-size = 0\nmax-connections = 500\nthread-cache-size = 50\nopen-files-limit = 65535\ntable-definition-cache = 4096\ntable-open-cache = 4096\n# INNODB #\ninnodb-flush-method = O_DIRECT\ninnodb-log-files-in-group = 2\ninnodb-log-file-size = 64M\ninnodb-flush-log-at-trx-commit = 1\ninnodb-file-per-table = 1\ninnodb-buffer-pool-size = 592M\n# LOGGING #\nlog-error = /data/mysql/data/mysql-error.log\nlog-queries-not-using-indexes = 1\nslow-query-log = 1\nslow-query-log-file = /data/mysql/data/mysql-slow.log\n复制MySQL启动文件及其命令加入PATH\ncp support-files/mysql.server /etc/init.d/mysqld\nvim /etc/profile.d/mysql.sh\nPATH=/data/mysql/server/bin:/data/mysql/server/lib:$PATH\nexport PATH\nsource /etc/profile.d/mysql.sh\n启动MySQL并增加启动项\nservice mysqld start\nchkconfig mysqld on\n设置MySQL登录权限\ndrop user \u0026ldquo;@localhost;\ndrop user \u0026ldquo;@hostname;\nupdate mysql.user set password=password(\u0026lsquo;3qw0ku7\u0026rsquo;);\nflush privileges;\n至此，MySQL编译安装完成。\n","permalink":"https://www.easyolap.cn/publications/mysql-src-install/","tags":["mysql","docker","agile"],"title":"Mysql源码安装！"},{"categories":null,"contents":"This talk looked at Liberty Mutual’s transformation to Continuous Integration, Continuous Delivery, and DevOps. For a large, heavily regulated industry, this task can not only be daunting, but viewed by many as impossible. Often, organizations try to reduce the friction through micro-fixes, but Eddie’s team asked how to change the culture to reduce the friction and concluded with the following final points:\n Don’t mandate DevOps. Give employees the chance to master their discipline with examples to set and follow. Favor deep end-to-end accomplishments over broad but incremental steps forward. Focus on taking the right teams far before encouraging broad adoption. Centralize the platforms and tools that your teams shouldn’t be thinking about. Provide foundational services/commodities and let teams stay on purpose. Incorporate contributions from everyone; don’t stifle autonomy. Stay open to new ways of working. Challenge security policies, but respect intentions. Find new ways to enforce concerns without abandoning precaution.    ","permalink":"https://www.easyolap.cn/publications/alldaydevops/","tags":["DevOps","Continuous Integration","Continuous Delivery","CI/CD pipelines","agile","Culture"],"title":"Organically DevOps: Building Quality and Security into the Software Supply Chain at Liberty Mutual"},{"categories":null,"contents":"  本文转载自：DevOps小站 官方网站，原文地址：https://www.easyolap.cn/publications/nexus-001-install-by-docker/\n 一、环境准备 安装docker,本文使用的版本为docker Server Version: 17.11.0-ce 定义域名和购买域名，制作私有证书或购买，本文采用已有域名，申请免费证书实现。  ​\n二、下载镜像并启协服务 ATLASSIAN_HOME=/data/nexus/ docker run -d \u0026ndash;name nexus \u0026ndash;hostname nexus \u0026ndash;user root:root \u0026ndash;restart always -v $ATLASSIAN_HOME/work:/nexus-data -p 8081:8081 -p 8082:8082 -p 6000-6010:6001-6010 -e NEXUS_CONTEXT=nexus sonatype/nexus3:3.13.0\n三、修改容器内的配置文件 /opt/sonatype/nexus/etc/nexus-default.properties添加“application-port-ssl=8082” 和 修改nexus-args的值增加“${jetty.etc}/jetty-https.xml,”\n修改前 # Jetty section application-port=8081 application-host=0.0.0.0 nexus-args=${jetty.etc}/jetty.xml,${jetty.etc}/jetty-http.xml,${jetty.etc}/jetty-requestlog.xml nexus-context-path=/${NEXUS_CONTEXT}\n# Nexus section nexus-edition=nexus-pro-edition nexus-features=\nnexus-pro-feature nexus.clustered=false \n修改后 # Jetty section application-port=8081 application-port-ssl=8082 application-host=0.0.0.0 nexus-args=${jetty.etc}/jetty.xml,${jetty.etc}/jetty-http.xml,${jetty.etc}/jetty-https.xml,${jetty.etc}/jetty-requestlog.xml nexus-context-path=/${NEXUS_CONTEXT}\n# Nexus section nexus-edition=nexus-pro-edition nexus-features=\nnexus-pro-feature nexus.clustered=false \n四、启用https服务 修改容器内的${jetty.etc}/jetty-https.xml配置文件，并上传证书到/opt/sonatype/nexus/etc/ssl目录下\n修改内容为：  \u0026lt;New id=\u0026quot;sslContextFactory\u0026quot; class=\u0026quot;org.eclipse.jetty.util.ssl.SslContextFactory\u0026quot;\u0026gt; \u0026lt;Set name=\u0026quot;KeyStorePath\u0026quot;\u0026gt;\u0026lt;Property name=\u0026quot;ssl.etc\u0026quot;/\u0026gt;/keystore.jks\u0026lt;/Set\u0026gt; \u0026lt;Set name=\u0026quot;KeyStorePassword\u0026quot;\u0026gt;fsdf!QAZ\u0026lt;/Set\u0026gt; \u0026lt;Set name=\u0026quot;KeyManagerPassword\u0026quot;\u0026gt;fsdf!QAZ\u0026lt;/Set\u0026gt; \u0026lt;Set name=\u0026quot;TrustStorePath\u0026quot;\u0026gt;\u0026lt;Property name=\u0026quot;ssl.etc\u0026quot;/\u0026gt;/keystore.jks\u0026lt;/Set\u0026gt; \u0026lt;Set name=\u0026quot;TrustStorePassword\u0026quot;\u0026gt;1qaz!QAZ\u0026lt;/Set\u0026gt;  \u0026hellip;\n上传证书到/opt/sonatype/nexus/etc/ssl并重命名为keystore.jks，（证书可以申请免费的证书一般一年的有效期，学习用足够了）\n五、重起服务 docker restart containerId \\#\\# containerId 通过docker ps 可以查到  六、访问测试 地址(domain.com根据自己的实际进行替换) https://domain.com:8082/nexus/\n七、登录测试 以默认用户名admin和密码admin123，及时修改密码，根据业务添加相关用户\n到此nexus安装完成，关地nexus做为maven私服和docker私服，后续会有相关笔记分享，敬请关注！\n","permalink":"https://www.easyolap.cn/publications/nexus-001-install-by-docker/","tags":["Nexus","docker","maven"],"title":"Nexus install by docker！"},{"categories":null,"contents":"Shields.io is a massive library of badges that can be inserted into project README\u0026rsquo;s or websites displaying various statuses (code coverage, health, version, etc). Support for docker was missing the current build health, and was a pretty trivial addition.\n","permalink":"https://www.easyolap.cn/projects/contributions/shields-docker/","tags":["Docker","Rest APIs","JavaScript","node.js","JSON"],"title":"Added Docker Build Status Badge to shields.io"},{"categories":null,"contents":"While adding Structured Data to a client\u0026rsquo;s website I found some example JSON that was invalid. Simple contribution to cleanup the user documentation providing syntactically valid JSON documents.\n","permalink":"https://www.easyolap.cn/projects/contributions/schema-org/","tags":["JSON"],"title":"Schema.org Structured Data documentation fixes"},{"categories":null,"contents":" 大家好，我叫 Frank Li，是一名程序员。 我的经历  1999-2002 沈阳工程学院信息工程系 2007-2012 辽宁广播电视大学(本科，工商管理专业) 2002-2005 测试开发（东软）。 2005-2006 JAVA程序员（千像公司，互联网公司） 2006-2007 程序员（新思软件，软件外包） 2007-2008 架构师（盛生医药，合伙创业电子商务） 2009-2009 架构师（智诚祥科技，政府项目） 2010-至今 资深软件工程师，技术负责人（东软）  我的技能  编程语言：JAVA,了解PHP,Python，捣鼓 Go…… 熟练使用Ofbiz,spring等流行框架;熟悉webservice和微服务; 熟练使用Maven对项目进行模块化管理和组织;了解Nexus server; 掌握jenkins持续集成工具与流程,了解DevOps思想和工具;熟悉JIRA用其管理项目; 熟悉Confluence对知识的管理，积累经验提高团队的战斗力; 掌握Linux下makefile;了解Android开发; 能够熟练操作和使用MYSQL、Oracle等数据库;熟练操作cassandra等nosql数据库 掌握docker虚拟化技术,撑握Dockerfile以及k8s模板编写; 成功实施过kubernetes; 熟练使用Linux操作系统,进行运营环境的部署; 熟悉Tomcat等服务器的使用和部署; 熟悉Selenium、dbunit和Junit/testng进行自动化/半自动化测试; 了解apache spark/beam大数据处理工具; 熟悉软件开发的整个周期;能够使用和指导使用分布式版本控制工具进行多地团队合作开发;  生活中的我  喜欢思考，对未知世界保持好奇心。 有点宅。  一些链接  JAVAEYE博客：surpass-li.iteye.com Github: github.com/surpass Email：surpass_li@aliyun.com(surpass.li@gmail.com) 微信号：s46488820\n  声明 本博客所有文章皆为原创。转载请注明原文链接，并最好与本人联系。谢谢！\n","permalink":"https://www.easyolap.cn/about/","tags":null,"title":"关于我"},{"categories":null,"contents":"BOSH (Bosh Outer SHell) \u0026ldquo;\u0026hellip; is an open source tool for release engineering, deployment, lifecycle management, and monitoring of distributed systems.\u0026rdquo; And it\u0026rsquo;s amazingly powerful. This examples uses BOSH to provision an Alassian vendor app running on JDK along with the support Postgres database and agents to support it. The releases manages the health of services and will automatically provision, start/stop processes across the various services.\n","permalink":"https://www.easyolap.cn/projects/creations/bosh-agents/","tags":["DevOps","BOSH","Java","Atlassian Ecosystem","monit","python","xml/xslt","bash/shell","REST APIs"],"title":"BOSH release for Bamboo \u0026 Remote Agents"},{"categories":null,"contents":"Multiple plugins used by thousands of teams that provide enhanced functionality of Atlassian’s core products (primarily JIRA and Bamboo) to enrich CI/CD capabilities, DevOps automation, or productivity. Functionality spans user interface, web services and persistence.\n","permalink":"https://www.easyolap.cn/projects/creations/marketplace/","tags":["Java","Spring","REST APIs","Javascript","Atlassian Developer Ecosystem","Bamboo","JIRA","Bitbucket","Confluence","DevOps"],"title":"Atlassian Marketplace Plugins"},{"categories":null,"contents":"Provides required dependencies and additional utilities to simplify and codify the process of building, testing and delivering Atlassian plugins all the way to the live marketplace. Executes integration/AUT level tests against all stated compatible versions for the productUploads generated artifact to Atlassian marketplaceProvides corresponding metadata indicating version, release notes, and compatibility\n","permalink":"https://www.easyolap.cn/projects/creations/docker-marketplace/","tags":["Docker","Maven","Java","Python","REST APIs","Bash/Shell"],"title":"Docker image for Bitbucket CI/CD Pipelines  \"shipit\""},{"categories":null,"contents":" This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;JSON\u0026quot;]  Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026quot;contents\u0026quot;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026quot;tags\u0026quot;:{{ .Params.tags | jsonify }}{{end}}, \u0026quot;categories\u0026quot; : {{ .Params.categories | jsonify }}, ...  Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026quot;title\u0026quot;, \u0026quot;contents\u0026quot;, \u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot; ]  ","permalink":"https://www.easyolap.cn/search/","tags":null,"title":"Search Results"}]