<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Publications on Eddie Webb</title>
    <link>https://www.easyolap.cn/publications/</link>
    <description>Recent content in Publications on Eddie Webb</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 16 Aug 2018 21:44:58 +0800</lastBuildDate>
    
	<atom:link href="https://www.easyolap.cn/publications/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Nexus build docker image Repository ！</title>
      <link>https://www.easyolap.cn/publications/nexus-002/</link>
      <pubDate>Thu, 16 Aug 2018 21:44:58 +0800</pubDate>
      
      <guid>https://www.easyolap.cn/publications/nexus-002/</guid>
      <description>  本文转载自：DevOps小站 官方网站，原文地址：https://www.easyolap.cn/publications/nexus-002/
 一、环境准备 安装好Nexus3环境，安装方法参见地址：https://www.easyolap.cn/publications/nexus-001-install-by-docker/。  ​
二、添加Docker镜像库用户（可选） 方法:  以管理员登录
 添加用户 (  三、创建本地镜像库 四、创建代理镜像库 五、创建分组镜像库 总结：   </description>
    </item>
    
    <item>
      <title>Nexus install by docker！</title>
      <link>https://www.easyolap.cn/publications/nexus-001-install-by-docker/</link>
      <pubDate>Thu, 16 Aug 2018 21:44:58 +0800</pubDate>
      
      <guid>https://www.easyolap.cn/publications/nexus-001-install-by-docker/</guid>
      <description>本文转载自：DevOps小站 官方网站，原文地址：https://www.easyolap.cn/publications/nexus-001-install-by-docker/
 一、环境准备 安装docker,本文使用的版本为docker Server Version: 17.11.0-ce 定义域名和购买域名，制作私有证书或购买，本文采用已有域名，申请免费证书实现。  ​
二、下载镜像并启协服务 ATLASSIAN_HOME=/data/nexus/ docker run -d &amp;ndash;name nexus &amp;ndash;hostname nexus &amp;ndash;user root:root &amp;ndash;restart always -v $ATLASSIAN_HOME/work:/nexus-data -p 8081:8081 -p 8082:8082 -p 6000-6010:6001-6010 -e NEXUS_CONTEXT=nexus sonatype/nexus3:3.13.0
三、修改容器内的配置文件 /opt/sonatype/nexus/etc/nexus-default.properties添加“application-port-ssl=8082” 和 修改nexus-args的值增加“${jetty.etc}/jetty-https.xml,”
修改前
 \# Jetty section application-port=8081 application-host=0.0.0.0 nexus-args=${jetty.etc}/jetty.xml,${jetty.etc}/jetty-http.xml,${jetty.etc}/jetty-requestlog.xml nexus-context-path=/${NEXUS_CONTEXT} \# Nexus section nexus-edition=nexus-pro-edition nexus-features=\ nexus-pro-feature nexus.clustered=false  修改后
\# Jetty section application-port=8081 application-port-ssl=8082 application-host=0.0.0.0 nexus-args=${jetty.etc}/jetty.xml,${jetty.etc}/jetty-http.xml,${jetty.etc}/jetty-https.xml,${jetty.etc}/jetty-requestlog.xml nexus-context-path=/${NEXUS_CONTEXT} \# Nexus section nexus-edition=nexus-pro-edition nexus-features=\ nexus-pro-feature nexus.</description>
    </item>
    
    <item>
      <title>使用ceph-deploy 2.0.0 部署ceph </title>
      <link>https://www.easyolap.cn/publications/ceph-cluster/</link>
      <pubDate>Thu, 27 Sep 2018 21:56:26 +0800</pubDate>
      
      <guid>https://www.easyolap.cn/publications/ceph-cluster/</guid>
      <description>OpenShift Origin 3.9.0手动单机安装
1.环境
1.1 硬件 6台 Linux虚拟机： server0, server1, server2, server3 , server4, server5 每台有两块磁盘 ： /dev/vdb, /dev/vdc 每台有一块网卡 ：eth0
1.2 软件 linux版本： CentOS 7.2.1511 内核版本 ： 3.10.0-327.el7.x86_64 ceph版本： 13.2.2 ceph-deploy版本： 2.0.0
2.准备工作(所有server)
2.1 配置静态IP
10.3.14.0/24
2.2 生成ssh key
# ssh-keygen  2.3 配置主机名解析 把如下内容追加到/etc/hosts:
10.3.14.19 server0 deploy 10.3.14.20 server1 10.3.14.12 server2 10.3.14.13 server3
修改所有节点的主机名，方法如下： sudo hostnamectl set-hostname server0
2.4.添加用户 下一件要做的就是，让添加部署的时候要用的用户了。在每个节点都执行：
sudo useradd -d /data/devops -m devops sudo echo &amp;ldquo;devops ALL = (root) NOPASSWD:ALL&amp;rdquo; | sudo tee /etc/sudoers.</description>
    </item>
    
    <item>
      <title>使用kubeadm安装k8s all-in-one单机测试环境 (版本1.11.1)</title>
      <link>https://www.easyolap.cn/publications/kubernetes-all-in-one/</link>
      <pubDate>Sat, 01 Sep 2018 21:56:26 +0800</pubDate>
      
      <guid>https://www.easyolap.cn/publications/kubernetes-all-in-one/</guid>
      <description>使用kubeadm安装k8s all-in-one单机测试环境
1.环境准备
 使用Oracle VM VirtualBox安装虚拟机
 配置双网卡，网卡1使用net方式;网卡2使用host-only（配置静态ip 192.168.134.0网段）;这样就可以实现虚拟机与宿主机，宿主机与虚拟机之前的通信。
 安装centos 7操作系统（CentOS-7-x86_64-DVD-1708.iso），最小安装版。
 配置国内yum源，我采用的是阿里的镜像。
 安装常用工具
 yum install -y telnet net-tools vim wget curl lrssz git unzip  关闭防火墙
 systemctl stop firewalld &amp;amp;&amp;amp; systemctl disable firewalld  关闭selinux
setenforce 0 sed -i s/&amp;quot;SELINUX=enforcing&amp;quot;/&amp;quot;SELINUX=disabled&amp;quot;/g /etc/selinux/config sed -i s/&amp;quot;^SELINUXTYPE=targeted&amp;quot;/&amp;quot;&amp;quot;/g /etc/selinux/config  安装docker-ce curl -fsSL https://get.docker.com/ | sh
 重启docker，配置自起 systemctl enable docker &amp;amp;&amp;amp; systemctl start docker
 配置系统参数
cat &amp;lt;&amp;lt;EOF | tee /etc/sysctl.</description>
    </item>
    
    <item>
      <title>golang学习笔记-关于数组，切片，映射</title>
      <link>https://www.easyolap.cn/publications/golang-001/</link>
      <pubDate>Sat, 25 Aug 2018 21:44:58 +0800</pubDate>
      
      <guid>https://www.easyolap.cn/publications/golang-001/</guid>
      <description> 本文转载自：DevOps小站 官方网站，原文地址：https://www.easyolap.cn/publications/golang-001
 数组、切片和映射小结
 数组是构造切片和映射的基石。
 Go语言里切片经常用来处理数据的集合，映射用来处理具有键值对结构的数据。
 内置函数make 可以创片和映射，并指定原始的长度和容量。也可以直接使切片和映射字央量，或者使用字面量作为变量作为变量的初始值。
 切片有容量限制，不过可以使用内置的append函数扩展容量。
 映射的增长设有容量或者任何限制。
 内置函数len可以用来获取切片或映射的长度。
 内置函数cap只能用于切片。
 通过组合，可以创建多维数组和多维切片。也可以使用切片或者其他映射作为映射 的值。但是切片不能用作映射的键。
 将切片或者映射传递给函数成本很小，并且不会复制底层的数据结构。
  </description>
    </item>
    
    <item>
      <title>OpenShift Origin  3.9.0手动单机安装</title>
      <link>https://www.easyolap.cn/publications/openshift-001/</link>
      <pubDate>Fri, 15 Jun 2018 21:56:26 +0800</pubDate>
      
      <guid>https://www.easyolap.cn/publications/openshift-001/</guid>
      <description>OpenShift Origin 3.9.0手动单机安装
1.配置主机 修改主机名为openshift.demo.com hostnamectl set-hostname openshift.demo.com
开启SELINUX 修改/etc/selinux/config SELINUX=enforcing SELINUXTYPE=targeted 激活网络 \# nmcli con show  docker0 1a211fa6-1001-4fa9-b5c8-e3b2dcf73e5a bridge docker0 ens192 f16e6b7a-e593-4722-9ae4-1bdfa1fa4b4a ethernet ens192
# nmcli con up ens192 # nmcli con mod ens192 connection.autoconnect yes # systemctl restart NetworkManager
2.安装docker 安装依赖 yum install -y wget git net-tools bind-utils iptables-services bridge-utils bash-completion 安装docker yum install -y docker 配置Docker镜像服务器
中国科技大学的镜像服务器进行加速。修改/etc/sysconfig/docker文件，在OPTIONS变量中追加&amp;ndash;registry-mirror=https://docker.mirrors.ustc.edu.cn &amp;ndash;insecure-registry=172.30.0.0/16。
3.下载openshift-origin-server-v3.9.0-191fece-linux-64bit.tar.gz
4.解压openshift-origin-server-v3.9.0-191fece-linux-64bit.tar.gz到 /opt/openshift
5.添加到PATH
6.测试docker是否能正常下载镜像 docker pull busybox</description>
    </item>
    
    <item>
      <title>Mysql install by Docker！</title>
      <link>https://www.easyolap.cn/publications/mysql-by-docker/</link>
      <pubDate>Mon, 31 Jul 2017 21:44:58 +0800</pubDate>
      
      <guid>https://www.easyolap.cn/publications/mysql-by-docker/</guid>
      <description>Docker运行mysql镜像 启动mysql镜像
[root@CentOS ~]# docker run -d -e MYSQL_ROOT_PASSWORD=admin &amp;ndash;name mysql -v /data/mysql/etc:/etc/mysql/conf.d -v /data/mysql/data:/var/lib/mysql -v /etc/localtime:/etc/localtime:ro mysql
说明：
1.把数据文件存贮在宿主机中的/data/mysql/data目录下，所以挂载/data/mysql/data到/var/lib/mysql
2.采用宿主机中的配置启动mysql服务，所以挂载 /data/mysql/etc到/etc/mysql/conf.d 配置文件见下文的my.cnf文件
3.使容器与宿主机时间同步，挂载/etc/localtime到/etc/localtime:ro 只读的方式。
my.cnf
[mysqld]
user = mysql
default-storage-engine = InnoDB
socket = /var/lib/mysql/mysql.sock
pid-file = /var/lib/mysql/mysql.pid
skip-external-locking
skip-name-resolve
\# MyISAM \#
key-buffer-size = 32M
# SAFETY #
max-allowed-packet = 16M
max-connect-errors = 1000000
# DATA STORAGE #
datadir = /var/lib/mysql
# CACHES AND LIMITS #
tmp-table-size = 32M</description>
    </item>
    
    <item>
      <title>Mysql源码安装！</title>
      <link>https://www.easyolap.cn/publications/mysql-src-install/</link>
      <pubDate>Mon, 31 Jul 2017 21:44:58 +0800</pubDate>
      
      <guid>https://www.easyolap.cn/publications/mysql-src-install/</guid>
      <description>本文转载自：DevOps小站 官方网站，原文地址：https://www.easyolap.cn/publications/mysql-by-docker/
 一、编译安装MySQL前准备工作
安装编译源码所需的工具和库
yum -y install gcc gcc-c++ ncurses-devel perl openssl-devel bison
安装cmake（记得好像从mysql 5.5开始需要cmake编译安装），可从https://cmake.org/download/ 中下载。
tar zxvf cmake-3.6.1.tar.gz
cd cmake-3.6.1
./bootstrap
make &amp;amp;&amp;amp; make install
二、创建用户及MySQL所需目录
新增mysql用户
groupadd -r mysql
useradd -r -g mysql mysql
新建MySQL所需目录
mkdir -p /data/mysql/server
mkdir -p /data/mysql/data
mkdir -p /data/mysql/etc
三、编译安装MySQL
可从http://dev.mysql.com/downloads/mysql/ 下载mysql源码(MySQL Community Server 5.6.32 )。
tar zxvf mysql-5.6.32.tar.gz
cd mysql-5.6.32
&amp;ldquo;cmake -DCMAKE_INSTALL_PREFIX=/data/mysql/server
-DDEFAULT_CHARSET=utf8\ -DDEFAULT_COLLATION=utf8_general_ci\ -DWITH_INNOBASE_STORAGE_ENGINE=1\ -DWITH_ARCHIVE_STORAGE_ENGINE=1\ -DWITH_BLACKHOLE_STORAGE_ENGINE=1\ -DMYSQL_DATADIR=/data/mysql/data\ -DMYSQL_TCP_PORT=3306\ -DENABLE_DOWNLOADS=1\ -DSYSCONFDIR=/data/mysql/etc\ -DWITH_SSL=system\ -DWITH_ZLIB=system\ -DWITH_LIBWRAP=0 &amp;ldquo;</description>
    </item>
    
  </channel>
</rss>